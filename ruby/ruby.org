* basic
** how ruby works
+ where ruby find its libraries(like java class path)
#+BEGIN_SRC ruby
ruby -e 'puts $:'

/fangxing/.rvm/rubies/ruby-2.2.2/lib/ruby/site_ruby/2.2.0
/home/fangxing/.rvm/rubies/ruby-2.2.2/lib/ruby/site_ruby/2.2.0/x86_64-linux
/home/fangxing/.rvm/rubies/ruby-2.2.2/lib/ruby/site_ruby
/home/fangxing/.rvm/rubies/ruby-2.2.2/lib/ruby/vendor_ruby/2.2.0
/home/fangxing/.rvm/rubies/ruby-2.2.2/lib/ruby/vendor_ruby/2.2.0/x86_64-linux
/home/fangxing/.rvm/rubies/ruby-2.2.2/lib/ruby/vendor_ruby
/home/fangxing/.rvm/rubies/ruby-2.2.2/lib/ruby/2.2.0
/home/fangxing/.rvm/rubies/ruby-2.2.2/lib/ruby/2.2.0/x86_64-linux
#+END_SRC

So when we =require 'some_thing'= ruby will try find it from this paths, if we want =require= a file from current directory we can use =require_relative=
** heredoc, string, array, regex,
+ multipe line string, here doc and %(%q, %Q)
#+BEGIN_SRC ruby
 execute_sql( <<-SQL
     select *
     from users
     where name="xxx"
     SQL
 )
 puts %{
   aaaa
   vvvv
ccc
}

#+END_SRC

+ regex
/pattern/
%r{pattern}

+ General Delimited Input
Example Meaning Type
#+BEGIN_SRC ruby
%q{\a and #{1+2} are literal} Single-quoted string %q
%Q{\a and #{1+2} are expanded} Double-quoted string %Q , %
%w[ one two three ] Array of strings %w , %W
%i[ one two three ] Array of symbols %i , %I (new in ⇡ 2.0 ⇣ )
%r{cat|dog} Regular expression pattern %r
%s!a symbol! A symbol %s
%x(df -h) Shell command %x
#+END_SRC
Unlike their lowercase counterparts, %I , %Q , and %W will preform interpolation:
#+BEGIN_SRC ruby
%i{ one digit#{1+1} three } # => [:one, :"digit\#{1+1}", :three]
%I{ one digit#{1+1} three } # => [:one, :digit2, :three]
%q{ one digit#{1+1} three } # => " one digit\#{1+1} three "
%Q{ one digit#{1+1} three } # => " one digit2 three "
%w{ one digit#{1+1} three } # => ["one", "digit\#{1+1}", "three"]
%W{ one digit#{1+1} three } # => ["one", "digit2", "three"]
#+END_SRC
** 函数 function
*** 参数
- 默认值，hash, =def func(a, b=2, c: false)...=
  ~func(1,c: true)~
- 任意长度hash =def func(**attr)..=
  func(a: 1, b: 2)
- 数组 =def func(a, *b)..=
  func(1, 3, 4, 5)
** variable in ruby class
~实例变量~ (instance variable)依赖于 =current object= 而 =self= 就是 =current object= 的只读引用
  - =class instance variable=
  - =class variable= (cross inheritance)
  - =object instance variable=
#+BEGIN_SRC ruby
class Person
  @name = "class instance variable" # 当前的self 是Person class object
  @@name = "class variable"
  def initialize(age)
    @age = age # object instance variable  # 这里的self是Person的一个实例
  end
end
#+END_SRC
** 代码块 code block
*** 代码块中的变量
 - 代码块中的变量是在创建的时候得到绑定，即代码块中的变量若和代码块变量名字相同，则他们是同一个变量
 - 若代码块的变量名和当前scope中的变量不相同，则该变量为代码块中的部变量
 - *Parameters* to a block are *always local* to a block, even if they have the same name as
locals in the surrounding scope. (You’ll get a warning message if you run Ruby with the -w
option.)

 #+BEGIN_SRC ruby
 value = "some shape"
 [ 1, 2 ].each {|value| puts value }
 puts value
# produces:
  1
  2
  some shape

 #+END_SRC

 - You can define =block-local= variables by putting them after a =semicolon(分号)= in the block’s
parameter list. So, in our sum-of-squares example, we should have indicated that the square
variable was =block-local= by writing it as follows:

#+BEGIN_SRC ruby

 square = "some shape"
 sum = 0
 [1, 2, 3, 4].each do |value; square|  # 用分号隔开表示局部变量
   square = value * value
   # this is a different variable
   sum += square
 end
 puts sum
#=> 30
 puts square
#=> some shape

#+END_SRC
** Meta Programming
